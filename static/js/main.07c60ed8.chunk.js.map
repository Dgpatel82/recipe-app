{"version":3,"sources":["recipe.module.css","Recipe.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Recipe","title","calories","image","ingredients","className","style","recipe","map","ingredient","text","toFixed","src","alt","getRecipes","query","setRecipes","a","fetch","process","response","json","data","hits","App","useState","recipes","search","setSearch","setQuery","useEffect","paddingTop","textAlign","onSubmit","e","preventDefault","type","value","placeholder","onChange","target","length","key","label","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kGACAA,EAAOC,QAAU,CAAC,OAAS,uBAAuB,MAAQ,wB,2MCmB3CC,EAjBA,SAAC,GAA6C,IAA3CC,EAA0C,EAA1CA,MAAOC,EAAmC,EAAnCA,SAAUC,EAAyB,EAAzBA,MAAOC,EAAkB,EAAlBA,YACxC,OACE,yBAAKC,UAAWC,IAAMC,QACpB,4BAAKN,GACL,4BACGG,EAAYI,KAAI,SAAAC,GAAU,OACzB,4BAAKA,EAAWC,UAGpB,2BACE,wCAAcR,EAASS,QAAQ,KAEjC,yBAAKN,UAAWC,IAAMH,MAAOS,IAAKT,EAAOU,IAAKZ,MCR9Ca,G,MAAU,uCAAG,WAAOC,EAAOC,GAAd,iBAAAC,EAAA,sEACMC,MAAM,mCAAD,OACSH,EADT,mBAJfI,WAIe,oBAHdA,qCAEG,cACXC,EADW,gBAIEA,EAASC,OAJX,OAIXC,EAJW,OAKjBN,EAAWM,EAAKC,MAAQ,IALP,2CAAH,yDA6DDC,EArDH,WAAO,IAAD,EACcC,mBAAS,IADvB,mBACTC,EADS,KACAV,EADA,OAEYS,mBAAS,IAFrB,mBAETE,EAFS,KAEDC,EAFC,OAGUH,mBAAS,cAHnB,mBAGTV,EAHS,KAGFc,EAHE,KAKhBC,qBAAU,WACRhB,EAAWC,EAAOC,KACjB,CAACD,IAYJ,OACE,yBAAKV,UAAU,OACb,yBAAKC,MAAO,CAACyB,WAAW,SAAS,wBAAIzB,MAAO,CAAC0B,UAAU,WAAtB,4CACjC,0BAAMC,SATQ,SAACC,GACjBA,EAAEC,iBACFN,EAASF,GACTC,EAAU,KAMmBvB,UAAU,eACnC,2BACEA,UAAU,aACV+B,KAAK,OACLC,MAAOV,EACPW,YAAY,qCACZC,SAnBa,SAACL,GACpBN,EAAUM,EAAEM,OAAOH,UAoBf,4BAAQhC,UAAU,gBAAgB+B,KAAK,UAAvC,WAIF,yBAAK/B,UAAU,WACZqB,EAAQe,OAAS,EAChBf,EAAQlB,KAAI,SAACD,GAAD,OACV,kBAAC,EAAD,CACEmC,IAAKnC,EAAOA,OAAOoC,MACnB1C,MAAOM,EAAOA,OAAOoC,MACrBzC,SAAUK,EAAOA,OAAOL,SACxBC,MAAOI,EAAOA,OAAOJ,MACrBC,YAAaG,EAAOA,OAAOH,iBAI/B,mDCjDUwC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.07c60ed8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"recipe\":\"recipe_recipe__1JQeB\",\"image\":\"recipe_image__1Lu7Q\"};","import React from \"react\";\nimport style from \"./recipe.module.css\";\n\nconst Recipe = ({ title, calories, image, ingredients }) => {\n  return (\n    <div className={style.recipe}>\n      <h1>{title}</h1>\n      <ol>\n        {ingredients.map(ingredient => (\n          <li>{ingredient.text}</li>\n        ))}\n      </ol>\n      <p>\n        <b>Calories: {calories.toFixed(1)}</b>\n      </p>\n      <img className={style.image} src={image} alt={title} />\n    </div>\n  );\n};\n\nexport default Recipe;\n","import React, { useEffect, useState } from \"react\";\nimport Recipe from \"./Recipe\";\nimport \"./App.css\";\n\nconst APP_ID = process.env.REACT_APP_EDAMAM_ID;\nconst APP_KEY = process.env.REACT_APP_EDAMAM_KEY;\n\nconst getRecipes = async (query, setRecipes) => {\n  const response = await fetch(\n    `https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`\n  );\n  const data = await response.json();\n  setRecipes(data.hits || []);\n};\n\nconst App = () => {\n  const [recipes, setRecipes] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [query, setQuery] = useState(\"Veg Paneer\");\n\n  useEffect(() => {\n    getRecipes(query, setRecipes);\n  }, [query]);\n\n  const updateSearch = (e) => {\n    setSearch(e.target.value);\n  };\n\n  const getSearch = (e) => {\n    e.preventDefault();\n    setQuery(search);\n    setSearch(\"\");\n  };\n\n  return (\n    <div className=\"App\">\n      <div style={{paddingTop:\"20px\"}}><h1 style={{textAlign:\"center\"}}>Welcome to Saloni Patel's Recipe House!</h1></div>\n      <form onSubmit={getSearch} className=\"search-form\">\n        <input\n          className=\"search-bar\"\n          type=\"text\"\n          value={search}\n          placeholder=\"Which dish do you want to prepare?\"\n          onChange={updateSearch}\n        />\n        <button className=\"search-button\" type=\"submit\">\n          Search\n        </button>\n      </form>\n      <div className=\"recipes\">\n        {recipes.length > 0 ? (\n          recipes.map((recipe) => (\n            <Recipe\n              key={recipe.recipe.label}\n              title={recipe.recipe.label}\n              calories={recipe.recipe.calories}\n              image={recipe.recipe.image}\n              ingredients={recipe.recipe.ingredients}\n            />\n          ))\n        ) : (\n          <p>No recipes found.</p>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}